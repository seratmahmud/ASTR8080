{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 This is the README document that goes with hw3.py for Mary Kaldor for ASTR8080 at Vanderbilt University. Homework 3 is broken into 3 tasks, and the python file is broken into 5 functions that address each of the questions.\
\
Function 1, write_ply(), takes in an nx4 array that contains caps on the sky. This function writes a .ply file (readable by mangle) that contains a mask of the sky that you describe with the caps. Each cap should be length 4, containing an x, y, z, and h coordinate. The first four caps should be those that denote a latitude-longitude rectangle on the sky as described in HW3. You can give it as many general caps on the sky as you\'92d like after the first 4 caps that denote the lat-lon rectangle. The function also asks for a file name to write the .ply file to \'97 note down whatever you give it, as this file name is used again in later functions. This function will write the whole file and close it.\
\
Function 2, latlon(), creates the lat-lon rectangle caps that you will use for write_ply(). Technically, you could calculate them yourself and feed them to write_ply() individually, but this is faster. The function takes in minimum and maximum RA and dec bounds, creates RA and dec caps for each of these four values, and flips the top RA and the top dec to grab the other half of the sky that they default select. This lets you create a rectangle where the inner region between the four lines is selected for mangle to use. This function returns 4 arrays of length 4 that contain the x, y, z, and h coordinates for a mangle polygon.\
\
Function 3, random_area(), calculates the area of a non-rectangular shape on the sky. For this specific homework, the area is the survey mask that the homework describes with 4 circular caps and the lat-lon rectangle. The logic behind this function is that the number of points randomly distributed by area in some space should be proportional to the area of that space. Following that logic, RA and dec minima and maxima that describe some area larger than the survey mask are given to the function, as well as a number of points that should be used to calculate the area. The function randomly populates the larger area and creates a ratio of points that fall inside the mask to the total number of points in that area and utilizes the square area of the lat-lon rectangle to calculate the area of the mask. There is a Boolean argument if you\'92d like to see some informative print statements and a plot of the points both inside and outside the mask. This function requires the same file name that you used in write_ply().\
\
Function 4, pick_points(), uses the result of random_area() in its method. Pick_points() takes in the same RA and dec bounds (to ensure consistent area calculations with random_area()) and iterates through points that are necessary to produce a consistent area calculation of the survey mask. The number of points starts at 100 and increases in increments of 100 points. For each number of points, 100 area calculations are done using random_area(), and the standard deviation of the areas is calculated. If the standard deviation is less than 0.5, the number of points that were used to find that area are returned. If not, the number of points increases by 100 for another attempt. This function also has a Boolean argument if you\'92d like to see the gradual decrease of standard deviations with respect to number of points over time displayed in a plot.\
\
Function 5, quasar_mask(), grabs quasar positions from a SDSS data file that is linked in Jessie Runnoe\'92s week7 folder for this class. If the quasars are inside the mask, they are plotted in one color, and the other quasars are plotted in another color. The area of the mask that is calculated using the resulting number of points from pick_points() is labeled on the plot, along with the number density of quasars in that mask. The number density is found by checking which quasars are contained in the mask and dividing that number by the area of the mask. A plot is produced displaying this, and a figure named quasars_mask.png will be saved locally.\
\
Overall, this work should run smoothly when run in the terminal from Mary Kaldor\'92s hw directory (/ASTRO8080/Mary/hw/hw3.py). The paths used in this file are all relative, so it should navigate to Runnoe\'92s directory and back, as well as other folders within Kaldor\'92s directory that contain functions used to make calculations for caps on the sky and areas of the lat-lon rectangles. There are timing statements between all major steps that are listed in seconds, and the area of the survey mask is printed always. The main arguments that can be changed for this file are the Booleans that decide whether you would like to see more information such as print statements about the data or plots. Everything else should remain the same, as it follows specific numeric values from the homework instructions for ASTRO8080 (unless you\'92d like to use the functions for something else entirely!)}